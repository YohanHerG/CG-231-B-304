//Yohan Hernando González Gutiérrez - 6000615

<!DOCTYPE html>
<html lang="en-GB">

<head>
  <meta charset="utf-8" />
  <title>Figura</title>
  <style>
    body {
      margin: 0;
    }
  </style>
</head>

<body>
  <script type="module">
    import * as THREE from 'https://sebastiann16.github.io/CompG/three.module.js';
    import { OrbitControls } from 'https://sebastiann16.github.io/CompG/OrbitControls.js';

    var WIDTH = window.innerWidth;
    var HEIGHT = window.innerHeight;

    var renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(WIDTH, HEIGHT);
    renderer.setClearColor(0x35FF70, 1);
    document.body.appendChild(renderer.domElement);

    var scene = new THREE.Scene();

    var camera = new THREE.PerspectiveCamera(70, WIDTH / HEIGHT);
    camera.position.z = 20;
    camera.position.y = 5;
    scene.add(camera);

    const light = new THREE.AmbientLight(0x24FFE4, 5);
    scene.add(light);

    // Crear un polígono plano con n lados y apotema "apotema"
    function poligonoRegular(n, apotema) {
      const shape = new THREE.Shape();
      const angle = (Math.PI * 2) / n;
      const radius = apotema / Math.tan(angle / 2);
      shape.moveTo(radius * Math.cos(0), radius * Math.sin(0));
      for (let i = 1; i <= n; i++) {
        shape.lineTo(radius * Math.cos(angle * i), radius * Math.sin(angle * i));
      }
      return shape;
    }

    // Crear un tronco de pirámide a partir de dos polígonos regulares de n lados y apotemas "apotema1" y "apotema2", y altura "height"
    function troncoPiramide(n, apotema1, apotema2, height) {
      const shape1 = poligonoRegular(n, apotema1);
      const shape2 = poligonoRegular(n, apotema2);
      const extrudeSettings = { depth: height, bevelEnabled: false };
      const geometry1 = new THREE.ExtrudeGeometry(shape1, extrudeSettings);
      const geometry2 = new THREE.ExtrudeGeometry(shape2, extrudeSettings);
      const material = new THREE.MeshPhongMaterial({ color: 0xF949FF });
      const mesh1 = new THREE.Mesh(geometry1, material);
      const mesh2 = new THREE.Mesh(geometry2, material);
      mesh1.position.y = -height / 2;
      mesh2.position.y = height / 2;
      const group = new THREE.Group();
      group.add(mesh1);
      group.add(mesh2);
      group.castShadow = true;
      group.receiveShadow = true;
      return group;
    }

    // Crear el tronco de pirámide y agregarlo a la escena
    const myTronco = troncoPiramide(6, 2, 1.5, 2);
    scene.add(myTronco);

    // Agregar líneas para las aristas del tronco de pirámide
    const wireframe1 = new THREE.WireframeGeometry(myTronco.children[0].geometry);
    const wireframe2 = new THREE.WireframeGeometry(myTronco.children[1].geometry);
    const lineMaterial = new THREE.LineBasicMaterial({ color: 0x000000 });
    const lineSegments1 = new THREE.LineSegments(wireframe1, lineMaterial);
    const lineSegments2 = new THREE.LineSegments(wireframe2, lineMaterial);
    myTronco.add(lineSegments1);
    myTronco.add(lineSegments2);

    // Ajustar la posición de las líneas para que se vean correctamente
    lineSegments1.position.y = -myTronco.position.y;
    lineSegments2.position.y = -myTronco.position.y;

    // Crear el material y el objeto de malla
    var material = new THREE.MeshBasicMaterial({ color: 0x24FFE4 });
    var poliedro = new THREE.Mesh(myTronco.geometry, material);

    // Agregar el poliedro a la escena
    scene.add(poliedro);

    const controls = new OrbitControls(camera, renderer.domElement);
    const axesHelper = new THREE.AxesHelper(1000);
    scene.add(axesHelper);

    const size = 1000;
    const divisions = 1000;

    const gridHelper = new THREE.GridHelper(size, divisions);
    scene.add(gridHelper);

    function animate() {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    }
    animate();
  </script>
</body>

</html>
